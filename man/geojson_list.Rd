% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geojson_list.R
\name{geojson_list}
\alias{geojson_list}
\title{Convert many input types with spatial data to geojson specified as a list}
\usage{
geojson_list(
  input,
  lat = NULL,
  lon = NULL,
  group = NULL,
  geometry = "point",
  type = "FeatureCollection",
  convert_wgs84 = FALSE,
  crs = NULL,
  ...
)
}
\arguments{
\item{input}{Input sf object.}

\item{lat}{character, Latitude name. The default is \code{NULL}, and we
attempt to guess.}

\item{lon}{character, Longitude name. The default is \code{NULL}, and we
attempt to guess.}

\item{group}{character, A grouping variable to perform grouping for
polygons - doesn't apply for points}

\item{geometry}{character, One of "point" (Default) or "polygon."}

\item{type}{character, The type of collection. One of "FeatureCollection"
(default) or "GeometryCollection".}

\item{convert_wgs84}{logical, Should the input be converted to the
standard CRS for GeoJSON (https://tools.ietf.org/html/rfc7946)
(geographic coordinate reference system, using the WGS84 datum, with
longitude and latitude units of decimal degrees; EPSG: 4326).
Default is \code{FALSE} though this may change in a future package version.
This will only work for \code{sf} or \code{Spatial} objects with a CRS
already defined. If one is not defined but you know what it is, you
may define it in the \code{crs} argument below.}

\item{crs}{numeric, The CRS of the input if it is not already defined. This can
be an epsg code as a four or five digit integer or a valid proj4 string.
This argument will be ignored if \code{convert_wgs84} is \code{FALSE}
or the object already has a CRS.}

\item{...}{Ignored}
}
\description{
Convert many input types with spatial data to geojson specified as a list
}
\details{
This set of functions is adapted from
\href{https://github.com/ropensci/geojsonio/releases/tag/v0.11.1}{geojsonio},
a larger package for converting GeoJSON formats.

This function creates a geojson structure as an R list.

For sf classes (sf, sfc, sfg), the following conversions are made:
\itemize{
\item sfg: the appropriate geometry \verb{Point, LineString, Polygon, MultiPoint,  MultiLineString, MultiPolygon, GeometryCollection}
\item sfc: \code{GeometryCollection}, unless the sfc is length 1, then the geometry
as above
\item sf: \code{FeatureCollection}
}
}
\examples{
\dontrun{
# From sf classes:
if (require(sf)) {
  ## sfg (a single simple features geometry)
  p1 <- rbind(c(0, 0), c(1, 0), c(3, 2), c(2, 4), c(1, 4), c(0, 0))
  poly <- rbind(c(1, 1), c(1, 2), c(2, 2), c(1, 1))
  poly_sfg <- st_polygon(list(p1))
  geojson_list(poly_sfg)

  ## sfc (a collection of geometries)
  p1 <- rbind(c(0, 0), c(1, 0), c(3, 2), c(2, 4), c(1, 4), c(0, 0))
  p2 <- rbind(c(5, 5), c(5, 6), c(4, 5), c(5, 5))
  poly_sfc <- st_sfc(st_polygon(list(p1)), st_polygon(list(p2)))
  geojson_list(poly_sfc)

  ## sf (collection of geometries with attributes)
  p1 <- rbind(c(0, 0), c(1, 0), c(3, 2), c(2, 4), c(1, 4), c(0, 0))
  p2 <- rbind(c(5, 5), c(5, 6), c(4, 5), c(5, 5))
  poly_sfc <- st_sfc(st_polygon(list(p1)), st_polygon(list(p2)))
  poly_sf <- st_sf(foo = c("a", "b"), bar = 1:2, poly_sfc)
  geojson_list(poly_sf)
}
}

}
\author{
Scott Chamberlain \href{mailto:myrmecocystus@gmail.com}{myrmecocystus@gmail.com},
Andy Teucher \href{mailto:andy.teucher@gmail.com}{andy.teucher@gmail.com}, and
Michael Mahoney \href{mailto:mike.mahoney.218@gmail.com}{mike.mahoney.218@gmail.com} (\url{https://orcid.org/0000-0003-2402-304X})
}
